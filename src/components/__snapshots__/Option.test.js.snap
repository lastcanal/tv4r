// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Option should render Option 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Option)
    data={
      Object {
        "value": "foo",
      }
    }
    setValue={[MockFunction]}
  >
    <Option
      data={
        Object {
          "value": "foo",
        }
      }
      dispatch={[Function]}
      setValue={[MockFunction]}
    >
      <WithStyles(ForwardRef(MenuItem))
        classes={
          Object {
            "root": "makeStyles-root-1",
            "selected": "makeStyles-selected-2",
          }
        }
        component="div"
        onClick={[Function]}
      >
        <ForwardRef(MenuItem)
          classes={
            Object {
              "dense": "MuiMenuItem-dense",
              "gutters": "MuiMenuItem-gutters",
              "root": "MuiMenuItem-root makeStyles-root-1",
              "selected": "Mui-selected makeStyles-selected-2",
            }
          }
          component="div"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItem))
            button={true}
            className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
            classes={
              Object {
                "dense": "MuiMenuItem-dense",
              }
            }
            component="div"
            disableGutters={false}
            onClick={[Function]}
            role="menuitem"
            tabIndex={-1}
          >
            <ForwardRef(ListItem)
              button={true}
              className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
              classes={
                Object {
                  "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                  "button": "MuiListItem-button",
                  "container": "MuiListItem-container",
                  "dense": "MuiListItem-dense MuiMenuItem-dense",
                  "disabled": "Mui-disabled",
                  "divider": "MuiListItem-divider",
                  "focusVisible": "Mui-focusVisible",
                  "gutters": "MuiListItem-gutters",
                  "root": "MuiListItem-root",
                  "secondaryAction": "MuiListItem-secondaryAction",
                  "selected": "Mui-selected",
                }
              }
              component="div"
              disableGutters={false}
              onClick={[Function]}
              role="menuitem"
              tabIndex={-1}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                component="div"
                disabled={false}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                role="menuitem"
                tabIndex={-1}
              >
                <ForwardRef(ButtonBase)
                  className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="div"
                  disabled={false}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  role="menuitem"
                  tabIndex={-1}
                >
                  <div
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="menuitem"
                    tabIndex={-1}
                  >
                    <WithStyles(ForwardRef(ListItemIcon))
                      key=".0"
                      onClick={[Function]}
                    >
                      <ForwardRef(ListItemIcon)
                        classes={
                          Object {
                            "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
                            "root": "MuiListItemIcon-root",
                          }
                        }
                        onClick={[Function]}
                      >
                        <div
                          className="MuiListItemIcon-root"
                          onClick={[Function]}
                        >
                          <ForwardRef
                            style={
                              Object {
                                "color": "inherit",
                              }
                            }
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              style={
                                Object {
                                  "color": "inherit",
                                }
                              }
                            >
                              <ForwardRef(SvgIcon)
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                                style={
                                  Object {
                                    "color": "inherit",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden="true"
                                  className="MuiSvgIcon-root"
                                  focusable="false"
                                  role="presentation"
                                  style={
                                    Object {
                                      "color": "inherit",
                                    }
                                  }
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef>
                        </div>
                      </ForwardRef(ListItemIcon)>
                    </WithStyles(ForwardRef(ListItemIcon))>
                    Foo
                    <NoSsr>
                      <WithStyles(undefined)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </div>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(ListItem)>
          </WithStyles(ForwardRef(ListItem))>
        </ForwardRef(MenuItem)>
      </WithStyles(ForwardRef(MenuItem))>
    </Option>
  </Connect(Option)>
</Provider>
`;

exports[`Option should render Option 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Option)
    data={
      Object {
        "value": "foo",
      }
    }
    setValue={[MockFunction]}
  >
    <Option
      data={
        Object {
          "value": "foo",
        }
      }
      dispatch={[Function]}
      setValue={[MockFunction]}
    >
      <WithStyles(ForwardRef(MenuItem))
        classes={
          Object {
            "root": "makeStyles-root-1",
            "selected": "makeStyles-selected-2",
          }
        }
        component="div"
        onClick={[Function]}
      >
        <ForwardRef(MenuItem)
          classes={
            Object {
              "dense": "MuiMenuItem-dense",
              "gutters": "MuiMenuItem-gutters",
              "root": "MuiMenuItem-root makeStyles-root-1",
              "selected": "Mui-selected makeStyles-selected-2",
            }
          }
          component="div"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItem))
            button={true}
            className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
            classes={
              Object {
                "dense": "MuiMenuItem-dense",
              }
            }
            component="div"
            disableGutters={false}
            onClick={[Function]}
            role="menuitem"
            tabIndex={-1}
          >
            <ForwardRef(ListItem)
              button={true}
              className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
              classes={
                Object {
                  "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                  "button": "MuiListItem-button",
                  "container": "MuiListItem-container",
                  "dense": "MuiListItem-dense MuiMenuItem-dense",
                  "disabled": "Mui-disabled",
                  "divider": "MuiListItem-divider",
                  "focusVisible": "Mui-focusVisible",
                  "gutters": "MuiListItem-gutters",
                  "root": "MuiListItem-root",
                  "secondaryAction": "MuiListItem-secondaryAction",
                  "selected": "Mui-selected",
                }
              }
              component="div"
              disableGutters={false}
              onClick={[Function]}
              role="menuitem"
              tabIndex={-1}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                component="div"
                disabled={false}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                role="menuitem"
                tabIndex={-1}
              >
                <ForwardRef(ButtonBase)
                  className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="div"
                  disabled={false}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  role="menuitem"
                  tabIndex={-1}
                >
                  <div
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="menuitem"
                    tabIndex={-1}
                  >
                    <WithStyles(ForwardRef(ListItemIcon))
                      key=".0"
                      onClick={[Function]}
                    >
                      <ForwardRef(ListItemIcon)
                        classes={
                          Object {
                            "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
                            "root": "MuiListItemIcon-root",
                          }
                        }
                        onClick={[Function]}
                      >
                        <div
                          className="MuiListItemIcon-root"
                          onClick={[Function]}
                        >
                          <ForwardRef
                            style={
                              Object {
                                "color": "inherit",
                              }
                            }
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              style={
                                Object {
                                  "color": "inherit",
                                }
                              }
                            >
                              <ForwardRef(SvgIcon)
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                                style={
                                  Object {
                                    "color": "inherit",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden="true"
                                  className="MuiSvgIcon-root"
                                  focusable="false"
                                  role="presentation"
                                  style={
                                    Object {
                                      "color": "inherit",
                                    }
                                  }
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef>
                        </div>
                      </ForwardRef(ListItemIcon)>
                    </WithStyles(ForwardRef(ListItemIcon))>
                    Foo
                    <NoSsr>
                      <WithStyles(undefined)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </div>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(ListItem)>
          </WithStyles(ForwardRef(ListItem))>
        </ForwardRef(MenuItem)>
      </WithStyles(ForwardRef(MenuItem))>
    </Option>
  </Connect(Option)>
</Provider>
`;

exports[`Option should render Option 3`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(Option)
    data={
      Object {
        "value": "foo",
      }
    }
    setValue={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "value": "foo",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <Option
      data={
        Object {
          "value": "foo",
        }
      }
      dispatch={[Function]}
      setValue={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "value": "foo",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
    >
      <WithStyles(ForwardRef(MenuItem))
        classes={
          Object {
            "root": "makeStyles-root-1",
            "selected": "makeStyles-selected-2",
          }
        }
        component="div"
        onClick={[Function]}
      >
        <ForwardRef(MenuItem)
          classes={
            Object {
              "dense": "MuiMenuItem-dense",
              "gutters": "MuiMenuItem-gutters",
              "root": "MuiMenuItem-root makeStyles-root-1",
              "selected": "Mui-selected makeStyles-selected-2",
            }
          }
          component="div"
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ListItem))
            button={true}
            className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
            classes={
              Object {
                "dense": "MuiMenuItem-dense",
              }
            }
            component="div"
            disableGutters={false}
            onClick={[Function]}
            role="menuitem"
            tabIndex={-1}
          >
            <ForwardRef(ListItem)
              button={true}
              className="MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters"
              classes={
                Object {
                  "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
                  "button": "MuiListItem-button",
                  "container": "MuiListItem-container",
                  "dense": "MuiListItem-dense MuiMenuItem-dense",
                  "disabled": "Mui-disabled",
                  "divider": "MuiListItem-divider",
                  "focusVisible": "Mui-focusVisible",
                  "gutters": "MuiListItem-gutters",
                  "root": "MuiListItem-root",
                  "secondaryAction": "MuiListItem-secondaryAction",
                  "selected": "Mui-selected",
                }
              }
              component="div"
              disableGutters={false}
              onClick={[Function]}
              role="menuitem"
              tabIndex={-1}
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                component="div"
                disabled={false}
                focusVisibleClassName="Mui-focusVisible"
                onClick={[Function]}
                role="menuitem"
                tabIndex={-1}
              >
                <ForwardRef(ButtonBase)
                  className="MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="div"
                  disabled={false}
                  focusVisibleClassName="Mui-focusVisible"
                  onClick={[Function]}
                  role="menuitem"
                  tabIndex={-1}
                >
                  <div
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiListItem-root MuiMenuItem-root makeStyles-root-1 MuiMenuItem-gutters MuiListItem-gutters MuiListItem-button"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="menuitem"
                    tabIndex={-1}
                  >
                    <WithStyles(ForwardRef(ListItemIcon))
                      key=".0"
                      onClick={[Function]}
                    >
                      <ForwardRef(ListItemIcon)
                        classes={
                          Object {
                            "alignItemsFlexStart": "MuiListItemIcon-alignItemsFlexStart",
                            "root": "MuiListItemIcon-root",
                          }
                        }
                        onClick={[Function]}
                      >
                        <div
                          className="MuiListItemIcon-root"
                          onClick={[Function]}
                        >
                          <ForwardRef
                            style={
                              Object {
                                "color": "inherit",
                              }
                            }
                          >
                            <WithStyles(ForwardRef(SvgIcon))
                              style={
                                Object {
                                  "color": "inherit",
                                }
                              }
                            >
                              <ForwardRef(SvgIcon)
                                classes={
                                  Object {
                                    "colorAction": "MuiSvgIcon-colorAction",
                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                    "colorError": "MuiSvgIcon-colorError",
                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                    "root": "MuiSvgIcon-root",
                                  }
                                }
                                style={
                                  Object {
                                    "color": "inherit",
                                  }
                                }
                              >
                                <svg
                                  aria-hidden="true"
                                  className="MuiSvgIcon-root"
                                  focusable="false"
                                  role="presentation"
                                  style={
                                    Object {
                                      "color": "inherit",
                                    }
                                  }
                                  viewBox="0 0 24 24"
                                >
                                  <path
                                    d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"
                                  />
                                </svg>
                              </ForwardRef(SvgIcon)>
                            </WithStyles(ForwardRef(SvgIcon))>
                          </ForwardRef>
                        </div>
                      </ForwardRef(ListItemIcon)>
                    </WithStyles(ForwardRef(ListItemIcon))>
                    Foo
                    <NoSsr>
                      <WithStyles(undefined)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(undefined)>
                    </NoSsr>
                  </div>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(ListItem)>
          </WithStyles(ForwardRef(ListItem))>
        </ForwardRef(MenuItem)>
      </WithStyles(ForwardRef(MenuItem))>
    </Option>
  </Connect(Option)>
</Provider>
`;
